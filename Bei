   ------------贝塞尔优化后的调用-------------------------------
   public target2:BeiSaiErBitmap;
    public target:BeiSaiErShape;
    public testCreateGameScene2(){
        var startX:number = 0;
        var startY:number = 300;
        var p0H:number = 0;
        var p1x:number = 200;
        var p1y:number = 200;
        var p1y_err:number = 0;

        this.target = new BeiSaiErShape(startX,startY,p0H,p1x,p1y,(p1y_err+300));
        this.target.graphics.beginFill(0xff0000);
        this.target.graphics.drawCircle(startX,startY,8);
        this.target.graphics.endFill();
        this.addChild(this.target);
        // this.target.beiSaiEr = new BeiSaiErPanel(this.target,startX,startY,p0H,p1x,p1y,(p1y_err+300));

        this.target2 = new BeiSaiErBitmap(startX,startY,p0H,p1x,p1y,p1y_err);
        this.target2.texture = RES.getRes("egret_icon_png");
        this.target2.scaleX = 0.5;
        this.target2.scaleY = 0.5;
        this.target2.anchorOffsetX = this.target.width / 2;//设置锚点在图x中心
        this.target2.anchorOffsetY = this.target.height / 2;//设置锚点在图y中心
        this.target2.x = startX;
        this.target2.y = startY;
        this.addChild(this.target2);
        // this.target2.beiSaiEr = new BeiSaiErPanel(this.target2,startX,startY,p0H,p1x,p1y,p1y_err);
    }
    
    
    ---------BeiSaiEr.ts接口类------------------------------------------------------------------------
    interface BeiSaiEr{
	beiSaiEr:BeiSaiErPanel;
	
}

class BeiSaiErBitmap extends egret.Bitmap implements BeiSaiEr{
	constructor(startX:number, startY:number, p0WH:number, p1X:number, p1Y:number, p1Y_err?:number,stageH?:number,endX?:number, endY?:number,delay?:number,loopLine?:boolean) {
		super();
		if(!this.beiSaiEr) this.beiSaiEr = new BeiSaiErPanel(this ,startX, startY, p0WH, p1X, p1Y, p1Y_err,stageH,endX, endY,delay,loopLine);
	}
	beiSaiEr:BeiSaiErPanel;
}
class BeiSaiErShape extends egret.Shape implements BeiSaiEr{
	constructor(startX:number, startY:number, p0WH:number, p1X:number, p1Y:number, p1Y_err?:number,stageH?:number,endX?:number, endY?:number,delay?:number,loopLine?:boolean) {
		super();
		if(!this.beiSaiEr) this.beiSaiEr = new BeiSaiErPanel(this ,startX, startY, p0WH, p1X, p1Y, p1Y_err,stageH,endX, endY,delay,loopLine);
	}
	beiSaiEr:BeiSaiErPanel;
}

class BeiSaiErPanel{
	public target:any;
	//需求为实现对象沿line3轨迹运动  
    public objectPoint:egret.Point;//起点P0 
    public objectWH:number;//控制p0点起始y高度，控制曲线的起点p0
    public highX:number;//
    public highY:number;//控制曲线的p1点高低，
	public highYError:number;//p1点高度误差
    public stageH:number;//舞台高
    public mainObject:egret.Point;//终点P2
	public delay:number;//缓动时间
	public loopLine:boolean;//是否循环播放 默认：false

	public timer:egret.Timer;//时间播放

	public constructor(target:any, startX:number = 0, startY:number = 0, p0WH:number = 0, p1X:number = 0, p1Y:number = 0, p1Y_err:number = 0,stageH:number = 500,endX:number = 0, endY:number = 0,delay:number = 2000,loopLine:boolean = true) {
		console.log(target);
		this.target = target;
		var frame = 30;
		this.timer = new egret.Timer(1000/frame,0);
		this.timer.addEventListener(egret.TimerEvent.TIMER,this.onFrame,this);
		this.timer.start();

		this.objectPoint = new egret.Point(startX,startY);
		this.mainObject  = new egret.Point(endX,endY);

		this.objectWH = p0WH;
		this.highYError = p1Y_err;

		this.highX = p1X;
		this.highY = p1Y  - this.highYError;
		
		this.stageH = stageH;
		this.delay = delay;
		this.loopLine = loopLine;

		//在1秒内，this的factor属性将会缓慢趋近1这个值，这里的factor就是曲线中的t属性，它是从0到1的闭区间。  
        egret.Tween.get(this,{loop:this.loopLine}).to({factor: 1}, this.delay);
	}
	
	public beiSaiErStart(){
		if(this.timer)this.timer.start();
	}
	public onFrame(e:egret.Event){
        this.target.x = this.mainObject.x;
		if(this.target instanceof egret.Shape) this.target.y = this.mainObject.y - this.objectPoint.y;
		else this.target.y = this.mainObject.y;
    }

	//添加factor的set,get方法,注意用public  
    public get factor():number {  
        return 0;
    }  
    
    //利用egret的缓动动画Tween来实现动画  
    //二次方贝塞尔公式 (1 - t)^2 P0 + 2 t (1 - t) P1 + t^2 P2  
    //起点P0  控制点P1  终点P2  
    public set factor(value:number) { 
        this.mainObject.x = (1 - value) * (1 - value) * this.objectPoint.x + 2 * value * (1 - value) * this.highX + value * value * (this.highX*2 - this.objectPoint.x);  
        this.mainObject.y = (1 - value) * (1 - value) * (this.objectPoint.y - this.objectWH) + 2 * value * (1 - value) * (this.highY ) + value * value * (this.stageH- this.objectWH);  
    } 
  //关闭时，释放监听
	public dispose(){
		this.timer.removeEventListener(egret.TimerEvent.TIMER,this.onFrame,this);
	}
}
    
